# main.py
import os
import sys
import argparse
import time
import shutil

# --- ‰ªé config.py ÂØºÂÖ•ÊâÄÊúâÈÖçÁΩÆ ---
try:
    from config import (
        SOURCE_DIRECTORY, OUTPUT_DIRECTORY, COMPILE_TYPES,
        MARKDOWN_COMPILERS, BENCHMARK_LOOPS, INCREMENTAL_COMPILE,
        CLEAN_OUTPUT_DEFAULT # <--- ÂØºÂÖ•Êñ∞ÈÖçÁΩÆ
    )
except ImportError:
    print("ÈîôËØØÔºöÊó†Ê≥ïÊâæÂà∞ÊàñÂØºÂÖ• config.py Êñá‰ª∂„ÄÇ")
    print("ËØ∑Á°Æ‰øùÊâÄÊúâÂøÖÈúÄÁöÑÈÖçÁΩÆÈ°πÈÉΩÂ∑≤ÂÆö‰πâ„ÄÇ")
    sys.exit(1)

# ‰ªé internal ÂåÖ‰∏≠ÂØºÂÖ•ÂëΩ‰ª§Â§ÑÁêÜÂáΩÊï∞
from internal.handlers import handle_auto

def format_time(seconds):
    """Â∞ÜÁßíÊï∞Ê†ºÂºèÂåñ‰∏∫ HH:MM:SS """
    seconds = int(seconds)
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def main():
    program_start_time = time.perf_counter()
    parser = argparse.ArgumentParser(
        description="‰∏Ä‰∏™ÈÄöÁî®ÁöÑ„ÄÅÊîØÊåÅÂπ∂Ë°åÁöÑÊñáÊ°£ÁºñËØëÂô®ÔºàÈÖçÁΩÆÊñá‰ª∂È©±Âä®Ôºâ„ÄÇ",
        epilog="ÊâÄÊúâË∑ØÂæÑÂíåÁºñËØëÈÄâÈ°πÂùáÂú® config.py ‰∏≠ÈÖçÁΩÆ„ÄÇÁõ¥Êé•ËøêË°å 'python main.py' Âç≥ÂèØ„ÄÇ"
    )
    
    # --- Ê†∏ÂøÉ‰øÆÊîπ 1: Â∞Ü --no-clean Êîπ‰∏∫ --clean ---
    parser.add_argument('--clean', action='store_true', help='„ÄêÂèØÈÄâ„ÄëÂêØÂä®Êó∂Âº∫Âà∂Ê∏ÖÁêÜÊóßÁöÑËæìÂá∫ÁõÆÂΩï„ÄÇ')
    parser.add_argument('--no-incremental', action='store_true', help='„ÄêÂèØÈÄâ„ÄëÁ¶ÅÁî®Â¢ûÈáèÁºñËØëÔºåÂº∫Âà∂ÈáçÊñ∞ÁºñËØëÊâÄÊúâÊñá‰ª∂„ÄÇ')
    parser.add_argument(
        '--jobs', '-j', type=int, default=None,
        help="„ÄêÂèØÈÄâ„ÄëÂπ∂Ë°åÁºñËØëÁöÑ‰ªªÂä°Êï∞Èáè (ÈªòËÆ§: ‰ΩøÁî®ÊâÄÊúâÂèØÁî®ÁöÑCPUÊ†∏ÂøÉ)"
    )
    parser.add_argument('--font', type=str, default="Noto Serif SC", help="„ÄêÂèØÈÄâ„Äë‰∏∫ Pandoc ÊåáÂÆö CJK Â≠ó‰Ωì (ÈªòËÆ§: Noto Serif SC)")

    args = parser.parse_args()
    
    source_dir_to_process = SOURCE_DIRECTORY
    output_dir_to_process = os.path.join(os.getcwd(), OUTPUT_DIRECTORY)

    # --- Ê†∏ÂøÉ‰øÆÊîπ 2: Êõ¥Êñ∞Ê∏ÖÁêÜÈÄªËæë ---
    # Âè™ÊúâÂΩìÁî®Êà∑ÊòéÁ°Æ‰ΩøÁî® --clean ÂèÇÊï∞ÔºåÊàñËÄÖ config Êñá‰ª∂‰∏≠ËÆæÁΩÆ‰∏∫ True Êó∂ÔºåÊâçÊâßË°åÊ∏ÖÁêÜ
    if args.clean or CLEAN_OUTPUT_DEFAULT:
        if os.path.exists(output_dir_to_process):
            print(f"üßπ Ê∏ÖÁêÜÊ®°ÂºèÂ∑≤ÊøÄÊ¥ªÔºåÊ≠£Âú®Âà†Èô§ÊóßÁöÑËæìÂá∫ÁõÆÂΩï: '{output_dir_to_process}'")
            try:
                shutil.rmtree(output_dir_to_process)
                print("‚úÖ ÊóßÁõÆÂΩïÂ∑≤ÊàêÂäüÂà†Èô§„ÄÇ")
            except OSError as e:
                print(f"Ëá¥ÂëΩÈîôËØØÔºöÊó†Ê≥ïÂà†Èô§ËæìÂá∫ÁõÆÂΩï '{output_dir_to_process}': {e}")
                sys.exit(1)
    
    try:
        os.makedirs(output_dir_to_process, exist_ok=True)
    except OSError as e:
        print(f"Ëá¥ÂëΩÈîôËØØÔºöÊó†Ê≥ïÂàõÂª∫È°∂Á∫ßËæìÂá∫ÁõÆÂΩï '{output_dir_to_process}': {e}")
        sys.exit(1)

    if not os.path.isdir(source_dir_to_process):
        print(f"ÈîôËØØÔºöÂú® config.py ‰∏≠ÈÖçÁΩÆÁöÑÊ∫êË∑ØÂæÑ '{source_dir_to_process}' ‰∏çÊòØ‰∏Ä‰∏™ÊúâÊïàÁöÑÁõÆÂΩï„ÄÇ")
        sys.exit(1)
        
    # --- Â∞ÜÊâÄÊúâÈÖçÁΩÆÊâìÂåÖÔºå‰º†ÈÄíÁªôÊ†∏ÂøÉÂ§ÑÁêÜÂô® ---
    auto_mode_args = argparse.Namespace(
        source_dir=source_dir_to_process,
        output_dir=output_dir_to_process,
        font=args.font,
        jobs=args.jobs,
        compile_types=COMPILE_TYPES,
        markdown_compilers=MARKDOWN_COMPILERS,
        benchmark_loops=BENCHMARK_LOOPS,
        incremental=not args.no_incremental and INCREMENTAL_COMPILE
    )
    handle_auto(auto_mode_args)
    
    program_end_time = time.perf_counter()
    print(f"\n\nüöÄ Á®ãÂ∫èÊÄªËøêË°åÊó∂Èó¥: {format_time(program_end_time - program_start_time)}")

if __name__ == '__main__':
    main()